% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jaccardTopicsPARALLEL.R
\name{parjaccardTopics}
\alias{parjaccardTopics}
\title{Pairwise Jaccard Coefficients}
\usage{
parjaccardTopics(topics, limit.rel, limit.abs, atLeast, pm.backend, ncpus)
}
\arguments{
\item{topics}{[\code{named matrix}]\cr
The counts of vocabularies (row wise) in topics (column wise).}

\item{limit.rel}{[0,1]\cr
A relative lower bound limit for which words are taken into account. Those words
are taken as relevant for a topic that have a count higher than \code{limit.rel}
multiplied by the total count of the given topic. Default is \code{1/500}.}

\item{limit.abs}{[\code{integer(1)}]\cr
An absolute lower bound limit for which words are taken into account. All words
are taken as relevant for a topic that have a count higher than \code{limit.abs}.
Default is \code{10}.}

\item{atLeast}{[\code{integer(1)}]\cr
An absolute count of how many words are at least considered as relevant for a topic.
Default is \code{0}.}

\item{progress}{[\code{logical(1)}]\cr
Should a nice progress bar be shown? Turning it off, could lead to significantly
faster calculation. Default is \code{TRUE}.}
}
\value{
[\code{named list}] with entries
\describe{
  \item{\code{sims}}{[\code{lower triangular named matrix}] with all pairwise
  jaccard similarities of the given topics.}
  \item{\code{wordslimit}}{[\code{integer}] with counts of words determined as
  relevant based on \code{limit.rel} and \code{limit.abs}.}
  \item{\code{wordsconsidered}}{[\code{integer}] with counts of considered
  words for similarity calculation. Could differ from \code{wordslimit}, if
  \code{atLeast} is greater than zero.}
  \item{\code{param}}{[\code{named list}] with parameter specifications for
  \code{limit.rel} [0,1], \code{limit.abs} [\code{integer(1)}] and
  \code{atLeast} [\code{integer(1)}] See above for explanation.}
}
}
\description{
Calculates the similarity of all pairwise topic combinations using a modified
Jaccard Coefficient.
}
\details{

}
\examples{
# TODO

}
